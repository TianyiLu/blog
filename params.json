{
  "name": "REST API design methods summary from work experience ",
  "tagline": "By Tovi",
  "body": "### 写在前面\r\n从入职以来的这一段时间，工作主要集中在对接CDN provider的API上面，这里总结一些在工作中积累的REST API设计的经验，可以作为未来的潜在需求的参考\r\n\r\n### 复用\r\nREST API 除了颠覆了以往对于API调用的设计模式外，个人认为REST API最大的贡献是可以复用。具体来说，基于Http request的REST API，每条都可以有GET/POST/PUT/DELETE等方法，因此同样的语句格式，使用不同的request method，即可设计为完全不同的目的。不同的http request method本质上没有区别，设计的目的本身就是为了粗分类，如GET方法也完全可以带request body，只是常规的理解里GET是不带body的。\r\n\r\n这里举一个对于节点（domain）操作的例子：\r\nGET    可以设计为获取节点的信息；\r\nPOST    可以设计为创建新节点；\r\nPUT    可以设计为更新节点状态、配置信息；\r\nDELETE    可以设置为删除节点。\r\n\r\n实践中尽管多数API都同时对几种方法做出支持，但是从易于理解和管理的角度上来讲，我建议每一条API的一种方法只对应一种含义。像同时支持GET/POST表示相同含义的方法，实际上是造成了重复和浪费。\r\n\r\n\r\n### 响应状态码和错误码设计\r\n为了迅速的对HTTP Response做出判断，响应状态建议可以分成三类：\r\n\r\n1. 即时成功\r\n\r\n2. 异步执行\r\n\r\n3. 请求失败\r\n\r\n即时成功的操作一般都是查询操作，建议使用状态码200和201，两种状态码对应状态并不相同，RFC 2616文件定义如下：\r\n#####200 OK\r\n   The request has succeeded. The information returned with the response\r\n   is dependent on the method used in the request, for example:\r\n   GET    an entity corresponding to the requested resource is sent in\r\n          the response;\r\n   HEAD   the entity-header fields corresponding to the requested\r\n          resource are sent in the response without any message-body;\r\n   POST   an entity describing or containing the result of the action;\r\n#####201 Created\r\n   The request has been fulfilled and resulted in a new resource being\r\n   created. The newly created resource can be referenced by the URI(s)\r\n   returned in the entity of the response, with the most specific URI\r\n   for the resource given by a Location header field. The response\r\n   SHOULD include an entity containing a list of resource\r\n   characteristics and location(s) from which the user or user agent can\r\n   choose the one most appropriate. The entity format is specified by\r\n   the media type given in the Content-Type header field. The origin\r\n   server MUST create the resource before returning the 201 status code.\r\n   If the action cannot be carried out immediately, the server SHOULD\r\n   respond with 202 (Accepted) response instead.\r\n   A 201 response MAY contain an ETag response header field indicating\r\n   the current value of the entity tag for the requested variant just\r\n   created.\r\n\r\n根据上述解释，不难看出，直接在返回值中携带数据的response，应该使用200；返回给用户链接，如相关下载链接的，应该使用201.\r\n\r\n异步执行的操作多数是需要服务器花时间进行运算的操作，如服务器缓存刷新，创建、删除、备份等操作，这一类的操作的特点是应立即让client端知道该请求是否已成功生成，且不可以长时间占用链接。这类API建议使用202，定义如下：\r\n#####202 Accepted\r\n   The request has been accepted for processing, but the processing has\r\n   not been completed.  The request might or might not eventually be\r\n   acted upon, as it might be disallowed when processing actually takes\r\n   place. There is no facility for re-sending a status code from an\r\n   asynchronous operation such as this.\r\n   The 202 response is intentionally non-committal. Its purpose is to\r\n   allow a server to accept a request for some other process (perhaps a\r\n   batch-oriented process that is only run once per day) without\r\n   requiring that the user agent's connection to the server persist\r\n   until the process is completed. The entity returned with this\r\n   response SHOULD include an indication of the request's current status\r\n   and either a pointer to a status monitor or some estimate of when the\r\n   user can expect the request to be fulfilled.\r\n\r\n对于请求失败的操作，建议统一格式，并进行分类，响应状态码作为粗分类（如4xx），在response body中设计自定义细分类码，并明确发生错误的请求信息和位置，最后给出具体错误信息。对于错误信息要补充一句，错误信息不怕给出的多，最怕给出的少。给出的多可以帮助程序员判断错误位置，而给出的少对于一些需要快速确定错误位置的情景，简直是灾难性的。\r\n\r\n这里给出一个简单的失败返回值样例：\r\n\r\nResponse Code : 503 Forbidden\r\n\r\nBody:\r\n\r\nError Code: AuthenticationFailure\r\n\r\nError Type: Client\r\n\r\nError Message: The signature got at the server is xxxxxxxx, which is incorrect. Please check your signature algorithm.\r\n\r\nError Request Id:  1b1736c7-72f8-467b-9f48-a0280833b8df\r\n\r\n\r\n###参数设计\r\n简单精确的参数设计是使REST API用户体验提升最重要的手段，这里总结3点设计上要点供参考：\r\n\r\n#####1. 数据一致\r\n这指对于同样意义的值，表现的方法要设计为同样的。比如对时间的操作，需要统一格式，如YYYY-MM-DD:hh:mm:ss ZZZ，或使用Unix epoch time，这样用户看到类似的数据就可以直接联想到是时间参数。不要使用几种不同的格式，如不同格式的时间。另，切忌不要近似格式！！如，API最后的使用者多数是机器，统一为一种格式就好，很多时候没必要考虑那么多兼容性问题，比如格式，完全可以统一精确到秒，不必要为了兼容性考虑同时兼容日、时、分、秒，这样反而容易带来误差。\r\n\r\n#####2. 格式一致\r\n试想在设计数据模型时，谁愿意为了只差一个两个参数不同的对象去多设计一个类呢？所以，尽可能减少参数体的格式，加强参数体的可扩展性这样可以大幅度减少存储数据的类的设计量。我在工作中就遇到过这样一组体验很差的类，如下：\r\n\r\nClass A:\r\n{\r\n     “domainName”: <domain_name>,\r\n     \"file_list\": \r\n     [ \r\n        {\r\n             \"file_name\": <file_name1\">,\r\n             \"file_type\": <file_type>\r\n         }        \r\n        {\r\n             \"file_name\": <file_name2\">,\r\n             \"file_type\": <file_type>\r\n         }        \r\n         {\r\n             \"file_name\": <file_name3\">,\r\n             \"file_type\": <file_type>\r\n         }\r\n      ]\r\n}\r\n\r\nClass B\r\n{\r\n     “domainName”: <domain_name>,\r\n     \"file_type\": <file_type>\r\n     \"file_list\": [ <file_name1\">,<file_name2\">,<file_name3\">]\r\n    \"operation_Id\": <operation_Id>\r\n}\r\n\r\n样例不完全符合工作实际，为近似回忆。两种数据格式携带的数据内容相似，然而为了针对这样数据返回，却要设计两种完全不同的方法去兼容这两种数据格式，这无形中加大了工作量。\r\n\r\n#####3. 数据类型使用\r\n\r\n何时使用字符串、何时使用整型、何时使用哈希表、何时使用数组，这些都是非常值得考虑的因素。根据不同的情景，要使用更易于参数格式，会使调试过程大大加快。\r\n如，针对某网络流量数据，我们给出下面两种格式，数据是一样的，那么哪种格式更受人欢迎呢？\r\n\r\nFormat A:\r\nTime_Stamp_List: [<epoch_time1>,<epoch_time2>,<epoch_time3>,<epoch_time4>, ... ]\r\nTraffic_Volumn_List: [<volumn_data1>,<volumn_data2>,<volumn_data3>,<volumn_data4>, ... ]\r\n\r\nFormat B:\r\nTraffic_Data:\r\n{\r\n    <epoch_time1> : <volumn_data1>\r\n    <epoch_time2> : <volumn_data2>\r\n    <epoch_time3> : <volumn_data3>\r\n    <epoch_time4> : <volumn_data4>\r\n}\r\n\r\n在数据量少时，两种方式区别不大，但是当数据量大时，显而易见，B格式即减少了需要的变量名，又使得数据以一一对应的方式出现。对于处理方，查询时可以直接找到对应关系，更为方便。所以，设计时要考虑到数据规模和使用便捷性。\r\n\r\n总而言之，我们在参数设计上，总是希望可以用最少的参数类型，去实现最多的功能，同时又要避免所有可能产生的歧义和误差。\r\n\r\n### 总结\r\n入职这几个月的时间以来，越来越深刻的体会到，代码设计最主要的目的是减少团队工作量，绝非给自己找更多的麻烦。代码的“智力附加值”是检验到底是攻城狮还是码农的最重要的标准，它不像科学问题那么追求出结果，但是要求“上乘品质”。\r\n不得不说首先要感谢老板推荐的code complete这本奇书，结合实践经验来读，的确觉得非常非常有用。从模块化到弱耦合等一系列概念从知晓到理解到慢慢能结合到实践中去，这还只是读了三分之一的体验，还有很多很多要学习的地方。\r\n另外工作中的学习方式也是一种很不同的体验，再没有人说这本书回去看，看完考试，都是用到的那一刻就需要你是个expert，很难做到哦！\r\n应该可以承担起更多的责任了，期待可以做的更好！（虽然不是很期待on call 新手大礼包2333）\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}